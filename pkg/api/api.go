package api

import (
	"encoding/json"
	"net/http"
)

// Result contains the information generated by and endpoint handler.
type Result struct {
	Errors []Error     `json:"errors,omitempty"`
	Data   interface{} `json:"data,omitempty"`
}

// Error contains details about error returned by endpoint handler.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message,omitempty"`
}

// genericResponseHandler wraps the result of the endpoint handler into a reponse that should be sent to the client.
func genericResponseHandler(fn func(*http.Request) (interface{}, error)) http.HandlerFunc {
	return func(writer http.ResponseWriter, request *http.Request) {
		encoder := json.NewEncoder(writer)
		var result Result

		r, err := fn(request)
		if err != nil {
			// TODO: set appropriate err code
			// do we want to build our err structures with codes?
			result.Errors = append(result.Errors, Error{1, err.Error()})
		} else {
			result.Data = r
		}
		encoder.Encode(result)
	}
}

// EndpointEntry represents an endpoint exposed by the daemon.
type EndpointEntry struct {
	Method      string
	Endpoint    string
	HandlerFunc http.HandlerFunc
}

// GetEndpoints should return a slice of all endpoints that the daemon exposes.
func GetEndpoints() []EndpointEntry {
	return []EndpointEntry{
		{
			Method:      "POST",
			Endpoint:    "/migrate-machine",
			HandlerFunc: genericResponseHandler(migrateMachineHandler),
		},
		{
			Method:      "POST",
			Endpoint:    "/port-inspect",
			HandlerFunc: genericResponseHandler(portInspectHandler),
		},
		{
			Method:      "POST",
			Endpoint:    "/check-target",
			HandlerFunc: genericResponseHandler(checkTargetHandler),
		},
		{
			Method:      "POST",
			Endpoint:    "/port-map",
			HandlerFunc: genericResponseHandler(portMapHandler),
		},
		{
			Method:      "POST",
			Endpoint:    "/destroy-container",
			HandlerFunc: genericResponseHandler(destroyContainerHandler),
		},
	}
}
